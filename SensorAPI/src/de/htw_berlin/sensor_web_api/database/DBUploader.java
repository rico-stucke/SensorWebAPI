package de.htw_berlin.sensor_web_api.database;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Map;
import java.util.Properties;

/**
 * Class for uploading sensor data to the OHDM database
 *
 * @author Rico Stucke
 *
 */
public class DBUploader {

    private SensorData data;

    private String url;
    private String user;
    private String pwd;
    /**
     * constructor for the uploader class
     *
     */
    public DBUploader() throws Exception {
        Class.forName("org.postgresql.Driver");

        Map<String,String> env = System.getenv();

        url = env.get("OHDM_URL");
        user = env.get("OHDM_USER");
        pwd = env.get("OHDM_PWD");

        if(url == null || user == null || pwd == null) {
            throw new Exception("Environment Variables not defined!");
        }
    }

    /**
     * method to start the upload of the supplied sensor data
     *
     * @param toUpload
     *            sensor data that needs to be uploaded to the database
     * @return returns the contentId if the upload was successful or -1 if it failed
     */
    public long uploadSensorData(SensorData toUpload) {

        this.data = toUpload;
        Properties props = new Properties();
        props.setProperty("user", user);
        props.setProperty("password", pwd);
        props.setProperty("ssl", "false");

        try {
            Connection conn = DriverManager.getConnection(url, props);

            if (this.checkDBForSourceUserId(data.getSourceUserId(), conn)) {
                return this.createContentTableEntry(props, conn);
            }
        } catch (SQLException e) {

            e.printStackTrace();
        }

        return -1;

    }

    /**
     * method to create a new sensor on the OHDM database
     *
     * @param sourceUserId
     *            id of the user who wants to create the sensor
     * @param sensorName
     *
     *            the name of the sensor
     * @param sensorMimetype
     *            the type of the sensor (e.g. temperature )
     * @return returns the id of the sensor that was generated by the database or -1
     *         if the action failed
     */
    public long createNewSensor(long sourceUserId, String sensorName, String sensorMimetype) {

        Properties props = new Properties();
        props.setProperty("user", user);
        props.setProperty("password", pwd);
        props.setProperty("ssl", "false");

        try {
            Connection conn = DriverManager.getConnection(url, props);

            if (this.checkDBForSourceUserId(sourceUserId, conn)) {
                return this.createNewSensor(sensorName, sensorMimetype, conn);
            }
        } catch (SQLException e) {

            e.printStackTrace();
        }

        return -1;
    }

    /**
     * method to add new sensor data to the OHDM database
     *
     * @param props
     *            previously generated properties of the connection
     * @param connection
     *            the previously opened connection to the DB server
     * @return returns the generated contentId if the upload was successful or -1 if
     *         it was unsuccessful
     */
    private long createContentTableEntry(Properties props, Connection connection) {

        long contentId = -1;

        String sqlInsert = "INSERT INTO berlin.content (sensorid, value, source_user_id, validSince, validUntil) values(?,?,?,?,?)";

        try (PreparedStatement statement = connection.prepareStatement(sqlInsert, Statement.RETURN_GENERATED_KEYS);) {

            statement.setLong(1, data.getSensorId());
            statement.setBytes(2, data.getValue().getBytes());
            statement.setLong(3, data.getSourceUserId());
            statement.setDate(4, Date.valueOf(data.getValidSince()));
            statement.setDate(5, Date.valueOf(data.getValidUntil()));

            int affectedRows = statement.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Uploading data to content table failed!");
            } else {
                if (affectedRows == 1) {

                    try (ResultSet generatedKey = statement.getGeneratedKeys()) {

                        if (generatedKey.next()) {
                            contentId = generatedKey.getLong(1);
                            this.createRelationEntry(contentId, connection);
                            return contentId;
                        } else {
                            throw new SQLException("Inserting data into sensors table failed, no ID obtained!");
                        }
                    }
                }
            }

        } catch (SQLException e) {

            e.printStackTrace();
        }

        return contentId;

    }
    /**
     * this method will insert a contentId and its corresponding geometryId into the corresponding relation table
     * @param contentId	the id of the content that was generated
     * @param connection the previously opened database connection
     * @return returns true if the update was successful
     */
    private boolean createRelationEntry(Long contentId, Connection connection) {

        String sqlInsert = "INSERT INTO berlin.content_" + data.getGeometryType() + " (content_id, "
                + data.getGeometryType() + "_id) values (?,?)";

        try (PreparedStatement statement = connection.prepareStatement(sqlInsert);) {

            statement.setLong(1, contentId);
            statement.setLong(2, data.getGeometryId());

            int affectedRows = statement.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Insert into relation table failed");
            } else {
                return true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * method to create a new entry in the OHDM database sensor table
     *
     * @param name
     *            the name of the sensor
     * @param mimetype
     *            the type of the sensor (e.g. temperature)
     * @param connection
     *            previously opened connection to the OHDM DB server
     * @return returns the database id of the sensor or -1 if the process failed
     */
    private long createNewSensor(String name, String mimetype, Connection connection) {

        long sensorId = -1;

        String sqlInsert = "INSERT INTO berlin.sensors (name, mimetype) values(?,?)";

        try (PreparedStatement statement = connection.prepareStatement(sqlInsert, Statement.RETURN_GENERATED_KEYS);) {

            statement.setString(1, name);
            statement.setString(2, mimetype);

            int affectedRows = statement.executeUpdate();

            if (affectedRows == 0) {
                throw new SQLException("Insert into Sensor table failed!");
            }

            // gets the Id that was automatically generated by the DB upon the entry of new
            // data
            try (ResultSet generatedKey = statement.getGeneratedKeys()) {

                if (generatedKey.next()) {
                    sensorId = generatedKey.getLong(1);
                    return sensorId;
                } else {
                    throw new SQLException("Inserting data into sensors table failed, no ID obtained!");
                }
            }

        } catch (SQLException e) {

            e.printStackTrace();
        }
        return sensorId;
    }

    /**
     * This Method checks the sensor_users table of the DB for the source user id
     * supplied by the SensorData class and stops the db upload if the user id was
     * not found.
     *
     * @param userId
     *            the supplied user Id
     * @param connection
     *            the connection to the OHDM db
     * @return returns true if the source user id has already been used in the
     *         content table of the DB
     */
    private boolean checkDBForSourceUserId(long userId, Connection connection) {

        String sqlExists = "select exists(select 1 from berlin.sensor_users where id = (?) limit 1)";

        try (PreparedStatement statement = connection.prepareStatement(sqlExists);) {

            statement.setLong(1, userId);

            try (ResultSet result = statement.executeQuery()) {

                if (result.next()) {
                    if (result.getBoolean(1)) {
                        return true;
                    } else {
                        System.out.println("supplied source user id was not found in the DB");
                        return false;
                    }

                } else {
                    throw new SQLException("The query returned no data. It should return a boolean!");
                }
            }
        } catch (SQLException e) {

            e.printStackTrace();
        }
        return false;
    }

}